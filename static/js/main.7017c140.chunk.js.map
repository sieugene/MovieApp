{"version":3,"sources":["Components/Navbar/Navbar.js","Components/Genres/Genres.jsx","Components/Helpers/StarIcon.jsx","Components/Movies/Movie.jsx","Components/Movies/Search/SearchInput.jsx","Components/Paginator/Paginator.jsx","Components/Preloader/Preloader.jsx","Components/Movies/PopularFilms.jsx","Api/api.js","Redux/moviesReducer.js","Redux/genresReducer.js","Components/Movies/PopularFilmsContainer.jsx","Components/Movies/DetailMovie/DetailMovie.jsx","Components/Movies/DetailMovie/DetailMovieContainer.jsx","Components/Recommendation/Recommendation.jsx","Redux/recommendationReducer.js","Components/Recommendation/RecommendationContainer.jsx","App.js","serviceWorker.js","Redux/store.js","index.js"],"names":["Navbar","props","className","to","Genres","arrayOfGenreId","genre_ids","arrayOfListGenres","genresList","resultArray","i","match","filter","item","id","length","push","map","genres","index","key","name","StarIcon","count","Movie","movieBack","backdrop_path","backgroundImage","exact","style","title","release_date","vote_average","SearchInput","useState","value","setValue","onSubmit","e","preventDefault","searchTC","onChange","target","setPopularMoviesTC","Paginator","currentPage","Number","totalPages","pageSize","pages","Math","ceil","portionNumber","setPortionNumber","portionsCount","portionSize","leftPortion","rightPortion","history","useHistory","onClick","s","changePortion","p","onPageCurrentChange","path","Preloader","width","PopularFilms","loading","toggle","useEffect","a","params","page","setGenresTC","fetchData","getMovies","popularMovies","results","f","genreList","total_pages","setCurrnetPageTC","API_KEY","baseURL","MoviesAPI","pageNumber","axios","get","filmId","currnetPage","query","GenresAPI","initialState","total_results","search","currentMovie","toggleLoading","type","setCurrentPage","setPopularMovies","movies","dispatch","promise","data","console","log","compose","connect","state","text","withRouter","DetailMovie","poster_path","original_title","runtime","spoken_languages","l","overview","g","getCurrentMovieTC","window","scrollTo","Recommendation","recommendation","setCurrnetPageRecTC","rec","currentPageRec","setRecommendationsTC","err","location","pathname","render","Boolean","hostname","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7017c140.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className='grey lighten-5'>\r\n            <div className=\"container\">\r\n                <div className=\"nav-wrapper\">\r\n                    <NavLink to=\"/\" className=\"brand-logo black-text text-darken-2\">\r\n                        MovieApp\r\n                    </NavLink>\r\n                   \r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\n\r\n\r\nconst Genres = (props) => {\r\n    let arrayOfGenreId = props.genre_ids;\r\n    let arrayOfListGenres = props.genresList;\r\n    let resultArray = []\r\n    for (let i = 0; i < arrayOfGenreId.length; i++) {\r\n        let match = arrayOfListGenres.filter(function (item) {\r\n            return item.id === arrayOfGenreId[i];\r\n        });\r\n        if (match.length > 0) {\r\n            resultArray.push(match[0]);\r\n        }\r\n    }\r\n    if (resultArray.length === 0) {\r\n        return ''\r\n    }\r\n    return (\r\n        <div>\r\n            {resultArray.map((genres, index) => {\r\n                return <div key={index}>{genres.name}</div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Genres","import React from 'react';\r\n\r\nconst StarIcon = (props) => {\r\n    if (props.count >= 8) {\r\n        return <i className=\"material-icons\">star</i>\r\n    } else if (props.count >= 3) {\r\n        return <i className=\"material-icons\">star_half</i>\r\n    } else {\r\n        return <i className=\"material-icons\">star_border</i>\r\n    }\r\n}\r\n\r\nexport default StarIcon;","import React from 'react';\r\nimport './Movie.css'\r\nimport { NavLink } from 'react-router-dom';\r\nimport Genres from '../Genres/Genres';\r\nimport StarIcon from '../Helpers/StarIcon';\r\nimport './Movie.css'\r\nconst Movie = (props) => {\r\n\r\n\r\n    let movieBack = {\r\n        \r\n    }\r\n    if (props.backdrop_path) {\r\n        movieBack = {\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/w600_and_h900_bestv2/${props.backdrop_path})`,\r\n        }\r\n    }\r\n    return (\r\n        <div className={'movie'}>\r\n            <NavLink exact to={`/detail/${props.id}/page/1`}>\r\n                <div className={\"movie__back\"} style={movieBack}></div>\r\n                <h5 className='truncate movie-title'>{props.title}</h5>\r\n                <div className=\"row movie__info\">\r\n                    <div className=\"col\">\r\n                        <p className='movie-date'> {props.release_date}</p>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <div className=\"star-icon\">\r\n                            <StarIcon count={props.vote_average} />{props.vote_average}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <Genres genre_ids={props.genre_ids} genresList={props.genresList} />\r\n                    </div>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Movie","import React, { useState } from 'react';\r\n\r\n\r\nconst SearchInput = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const handleChange = (e) => {\r\n        if (e.target.value === '') {\r\n            return props.setPopularMoviesTC(1)\r\n        }\r\n        setValue(e.target.value)\r\n    }\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.searchTC(value);\r\n    }\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <div className=\"row\">\r\n                <div className=\"col s10\">\r\n                    <input onChange={handleChange} />\r\n                </div>\r\n                <div className=\"col s2\">\r\n                    <button className='waves-effect waves-light btn-small'>Search</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchInput;","import React, { useState } from 'react';\r\nimport s from './Paginator.module.css'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst Paginator = (props) => {\r\n    let currentPage = Number(props.currentPage);\r\n    let totalPages = props.pageSize;\r\n    let pages = [];\r\n    for (let i = 1; i <= Math.ceil(totalPages); i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let portionsCount = Math.ceil(totalPages / props.portionSize);\r\n    let leftPortion = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortion = portionNumber * props.portionSize;\r\n    const history = useHistory();\r\n   \r\n\r\n    return (\r\n        <ul className=\"pagination center-align\">\r\n            {portionNumber >= 2 && <li onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }} className={s.changePortion}> {<i className=\"material-icons\">chevron_left</i>}</li>}\r\n            {pages.filter(p => p >= leftPortion && p <= rightPortion)\r\n                .map(p => {\r\n                    return <li className={currentPage === p ? 'active' : 'waves-effect'}\r\n                        onClick={(e) => {\r\n                            props.onPageCurrentChange(p);\r\n                            history.push(`${props.path}${p}`)\r\n                        }} key={p}><a >{p}</a></li>\r\n                })}\r\n            {portionsCount > portionNumber && <li onClick={() => {\r\n                setPortionNumber(portionNumber + 1);\r\n            }} className={s.changePortion}>{<i className=\"material-icons\">chevron_right</i>}\r\n            </li>\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\n\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <div className=\"progress\">\r\n            <div className=\"determinate\" style={{width:'70%'}}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import React, { useEffect, useState } from 'react';\r\nimport Movie from './Movie';\r\nimport SearchInput from './Search/SearchInput';\r\nimport Paginator from '../Paginator/Paginator';\r\nimport Preloader from '../Preloader/Preloader';\r\n\r\n\r\n\r\n\r\n\r\nconst PopularFilms = (props) => {\r\n    const [loading, toggle] = useState(true);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            await props.setPopularMoviesTC(props.match.params.page);\r\n            await props.setGenresTC();\r\n            toggle(false);\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    const getMovies = props.popularMovies.results.map((f) => {\r\n        return <div className=\"col s12 m6 l4 xl3\" key={f.id}>\r\n            <Movie title={f.title}\r\n                release_date={f.release_date}\r\n                vote_average={f.vote_average}\r\n                backdrop_path={f.backdrop_path}\r\n                id={f.id}\r\n                genresList={props.genreList.genres}\r\n                genre_ids={f.genre_ids}\r\n            />\r\n        </div>\r\n    })\r\n    if (loading) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <>\r\n            {props.loading ? <Preloader /> : ''}\r\n            <div className='mt20'>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <h5 className='left-align'>Popular Films</h5>\r\n                    </div>\r\n                </div>\r\n\r\n                <SearchInput searchTC={props.searchTC} setPopularMoviesTC={props.setPopularMoviesTC} />\r\n\r\n                <div className=\"row\">\r\n                    {getMovies}\r\n                </div>\r\n            </div>\r\n            <Paginator pageSize={props.popularMovies.total_pages}\r\n                currentPage={props.match.params.page}\r\n                onPageCurrentChange={props.setCurrnetPageTC}\r\n                portionSize={10}\r\n                path={'/popular/'}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PopularFilms","import axios from \"axios\";\r\nconst API_KEY = 'api_key=8ffead32759a85dce9ea6d40e5a6bf7f'\r\nconst baseURL = 'https://api.themoviedb.org/3/'\r\n\r\n\r\nexport const AuthenticationAPI = {\r\n    authenticationTokenNew() {\r\n        return axios.get(`authentication/token/new?${API_KEY}`)\r\n    },\r\n    authenticate(REQUEST_TOKEN) {\r\n        return axios.get(`authenticate/${REQUEST_TOKEN}`)\r\n    },\r\n    authenticationSessionNew() {\r\n        return axios.post(`authentication/session/new?${API_KEY}`)\r\n    },\r\n    guestSessionNew() {\r\n        return axios.get(`authentication/guest_session/new?${API_KEY}`)\r\n    }\r\n}\r\nexport const GuestSessionsAPI = {\r\n    ratedMovies(guest_session_id) {\r\n        return axios.get(`guest_session/${guest_session_id}/rated/movies?${API_KEY}&language=en-US&sort_by=created_at.asc`)\r\n    }\r\n\r\n}\r\n\r\nexport const MoviesAPI = {\r\n    getPopular(pageNumber) {\r\n        return axios.get(`${baseURL}movie/popular?${API_KEY}&language=en-US&page=${pageNumber}`)\r\n    },\r\n    getCurrentMovie(filmId) {\r\n        return axios.get(`${baseURL}movie/${filmId}?${API_KEY}&language=en-US`)\r\n    },\r\n    getRecommendations(filmId, currnetPage) {\r\n        return axios.get(`${baseURL}movie/${filmId}/recommendations?${API_KEY}&language=en-US&page=${currnetPage}`)\r\n    },\r\n    search(query) {\r\n        return axios.get(`${baseURL}search/movie?${API_KEY}&query=${query}`)\r\n    }\r\n}\r\n\r\nexport const GenresAPI = {\r\n    movieList() {\r\n        return axios.get(`${baseURL}genre/movie/list?${API_KEY}&language=en-US`)\r\n    }\r\n}","import { MoviesAPI } from \"../Api/api\";\r\n\r\nconst SET_MOVIES = 'SET_MOVIES';\r\nconst SET_POPULAR_MOVIES = 'SET_POPULAR_MOVIES'\r\nconst SEARCH = 'SEARCH'\r\nconst CURRENT_MOVIE = 'CURRENT_MOVIE'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst TOGGLE_LOADER = 'MOVIES/TOGGLE_LOADER';\r\n\r\nlet initialState = {\r\n    popularMovies: {\r\n        results: [],\r\n        page: 0,\r\n        total_results: 0,\r\n        total_pages: 0\r\n    },\r\n    search: '',\r\n    currentMovie: [],\r\n    currentPage: 1,\r\n    loading: false\r\n}\r\nexport const movieReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_POPULAR_MOVIES:\r\n            return {\r\n                ...state,\r\n                popularMovies: action.movies\r\n            }\r\n        case CURRENT_MOVIE:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    currentMovie: action.currentMovie\r\n                }\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        case TOGGLE_LOADER:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleLoading = (loading) => {\r\n    return {\r\n        type: TOGGLE_LOADER,\r\n        loading\r\n    }\r\n}\r\nexport const setMoviesAC = (movies) => {\r\n    return {\r\n        type: SET_MOVIES,\r\n        movies\r\n    }\r\n}\r\nexport const setCurrentPage = (page) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        page\r\n    }\r\n}\r\nexport const setPopularMovies = (movies) => {\r\n    return {\r\n        type: SET_POPULAR_MOVIES,\r\n        movies\r\n    }\r\n}\r\nexport const search = (text) => {\r\n    return {\r\n        type: SEARCH,\r\n        text\r\n    }\r\n}\r\nexport const getCurrentMovieAC = (currentMovie) => {\r\n    return {\r\n        type: CURRENT_MOVIE,\r\n        currentMovie\r\n    }\r\n}\r\n\r\n\r\nexport const searchTC = (text) => async(dispatch) => {\r\n    try {\r\n        dispatch(toggleLoading(true));\r\n        let promise = await MoviesAPI.search(text)\r\n        dispatch(setPopularMovies(promise.data));\r\n        dispatch(toggleLoading(false));\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch(toggleLoading(false));\r\n    }\r\n}\r\nexport const setPopularMoviesTC = (page) => async(dispatch) => {\r\n    try {\r\n        dispatch(toggleLoading(true));\r\n        let promise = await MoviesAPI.getPopular(page)\r\n        dispatch(setPopularMovies(promise.data));\r\n        dispatch(toggleLoading(false));\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch(toggleLoading(false));\r\n    }\r\n}\r\nexport const getCurrentMovieTC = (filmId) => async(dispatch) => {\r\n    try {\r\n        dispatch(toggleLoading(true));\r\n        let promise = await MoviesAPI.getCurrentMovie(filmId)\r\n        dispatch(getCurrentMovieAC(promise.data));\r\n        dispatch(toggleLoading(false));\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch(toggleLoading(false));\r\n    }\r\n}\r\nexport const setCurrnetPageTC = (page) => async(dispatch) => {\r\n    try {\r\n        dispatch(toggleLoading(true));\r\n        dispatch(setCurrentPage(page));\r\n        let promise = await MoviesAPI.getPopular(page)\r\n        dispatch(setPopularMovies(promise.data));\r\n        dispatch(toggleLoading(false));\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch(toggleLoading(false));\r\n    }\r\n}","import { GenresAPI } from \"../Api/api\";\r\n\r\nconst GET_GENRES = 'GET_GENRES';\r\nconst TOGGLE_LOADER = 'REC/TOGGLE_LOADER';\r\n\r\n\r\nlet initialState = {\r\n    genreList: [],\r\n    loading: false\r\n}\r\nexport const genreReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_GENRES:\r\n            return {\r\n                ...state,\r\n                genreList: action.genreList\r\n            }\r\n        case TOGGLE_LOADER:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setGenresAC = (genreList) => {\r\n    return {\r\n        type: GET_GENRES,\r\n        genreList\r\n    }\r\n}\r\nexport const toggleLoading = (loading) => {\r\n    return {\r\n        type: TOGGLE_LOADER,\r\n        loading\r\n    }\r\n}\r\n\r\n\r\nexport const setGenresTC = () => async(dispatch) => {\r\n    try {\r\n        dispatch(toggleLoading(true));\r\n        let promise = await GenresAPI.movieList()\r\n        dispatch(setGenresAC(promise.data));\r\n        dispatch(toggleLoading(false));\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch(toggleLoading(false));\r\n    }\r\n}","import React from 'react';\r\nimport PopularFilms from './PopularFilms';\r\nimport { connect } from 'react-redux';\r\nimport { setPopularMoviesTC,searchTC, setCurrnetPageTC } from '../../Redux/moviesReducer';\r\nimport { setGenresTC } from '../../Redux/genresReducer';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\n\r\nconst PopularFilmsContainer = (props) => {\r\n    return (\r\n        <PopularFilms {...props} />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        popularMovies: state.movies.popularMovies,\r\n        genreList: state.genres.genreList,\r\n        currentPage: state.movies.currentPage,\r\n        loading: state.movies.loading\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, { \r\n    setPopularMoviesTC,searchTC,setGenresTC,setCurrnetPageTC}),\r\n    withRouter\r\n    )(PopularFilmsContainer)","import React from 'react';\r\nimport StarIcon from '../../Helpers/StarIcon';\r\nimport './DetailMovie.css'\r\nimport Preloader from '../../Preloader/Preloader';\r\n\r\n\r\nconst DetailMovie = (props) => {\r\n\r\n    //filmId = props.id\r\n    const movieBack = {\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/w1280_and_h720_bestv2/${props.currentMovie.poster_path})`,\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {props.loading ? <Preloader/> : ''}\r\n        <div className='detailMovie'>\r\n            <div className=\"detailMovie__wrapper\">\r\n                <div className=\"detailMovie__backImg\" style={movieBack}></div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <h5><b>{props.currentMovie.original_title}/{props.currentMovie.title}</b></h5>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 m4 l3 xl3\">\r\n                            <StarIcon count={props.currentMovie.vote_average} />{props.currentMovie.vote_average}\r\n                        </div>\r\n                        <div className=\"col s12 m4 l3 xl3\">\r\n                            RunTime: {props.currentMovie.runtime} min\r\n                        </div>\r\n                        <div className=\"col s12 m4 l3 xl3\">\r\n                            Languages:<ul>{props.currentMovie.spoken_languages.map((l, index) => {\r\n                            return <li key={index}>{l.name}</li>\r\n                        })}</ul>\r\n                        </div>\r\n                        <div className=\"col s12 m4 l3 xl3\">\r\n                            Release Date: {props.currentMovie.release_date}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <h5><b>Overview</b></h5>\r\n                            <p>\r\n                                {props.currentMovie.overview}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <b>Genres:</b> <ul>\r\n                                {props.currentMovie.genres.map((g, index) => {\r\n                                    return <li key={index}>\r\n                                        {g.name}\r\n                                    </li>\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailMovie","import React, { useEffect, useState } from 'react'\r\nimport DetailMovie from './DetailMovie'\r\nimport { connect } from 'react-redux'\r\nimport { getCurrentMovieTC } from '../../../Redux/moviesReducer'\r\nimport { compose } from 'redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Preloader from '../../Preloader/Preloader'\r\n\r\n\r\nconst DetailMovieContainer = (props) => {\r\n    const[loading,toggle] = useState(true);\r\n    let filmId = props.match.params.filmId\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            await props.getCurrentMovieTC(filmId);\r\n            window.scrollTo(0, 0)\r\n            toggle(false);\r\n        }\r\n        fetchData();\r\n    }, [props.match.params.filmId])\r\n    if(loading){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <DetailMovie currentMovie={props.currentMovie}/>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        currentMovie: state.movies.currentMovie,\r\n        loading: state.movies.loading\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, {\r\n    getCurrentMovieTC\r\n}),\r\n    withRouter\r\n)(DetailMovieContainer)","import React from 'react';\r\nimport './Recommendation.css'\r\nimport Paginator from '../Paginator/Paginator';\r\nimport Movie from '../Movies/Movie';\r\nimport Preloader from '../Preloader/Preloader';\r\n\r\nconst Recommendation = (props) => {\r\n    const getMovies = props.recommendation.results.map((f) => {\r\n        return <div className=\"col s12 m6 l4 xl3\" key={f.id}>\r\n            <Movie title={f.title}\r\n                release_date={f.release_date}\r\n                vote_average={f.vote_average}\r\n                backdrop_path={f.backdrop_path}\r\n                id={f.id}\r\n                genresList={props.genreList.genres}\r\n                genre_ids={f.genre_ids}\r\n            />\r\n        </div>\r\n    })\r\n    return (\r\n        <>\r\n        {props.loading ? <Preloader/> : ''}\r\n            <div className=\"container\">\r\n                <div className='mt20'>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <h5 className='left-align'>Featured movies</h5>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        {getMovies}\r\n                    </div>\r\n                </div>\r\n                <Paginator pageSize={props.recommendation.total_pages}\r\n                    currentPage={props.match.params.page}\r\n                    path={`/detail/${props.match.params.filmId}/page/`}\r\n                    onPageCurrentChange={props.setCurrnetPageRecTC}\r\n                    portionSize={10}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Recommendation","import { MoviesAPI } from \"../Api/api\";\r\n\r\nconst SET_RECOMMENDATIONS = 'SET_RECOMMENDATIONS';\r\nconst SET_CURRENT_PAGE_REC = 'SET_CURRENT_PAGE_REC'\r\nconst TOGGLE_LOADER = 'RECOMEND/TOGGLE_LOADER';\r\n\r\nlet initialState = {\r\n    recommendation: [],\r\n    page: 1,\r\n    loading: false\r\n}\r\nexport const recommendationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_RECOMMENDATIONS:\r\n            return {\r\n                ...state,\r\n                recommendation: action.recommendation\r\n            }\r\n        case SET_CURRENT_PAGE_REC:\r\n            return {\r\n                ...state,\r\n                page: action.page\r\n            }\r\n        case TOGGLE_LOADER:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleLoading = (loading) => {\r\n    return {\r\n        type: TOGGLE_LOADER,\r\n        loading\r\n    }\r\n}\r\nexport const setRecommendationsAC = (recommendation) => {\r\n    return {\r\n        type: SET_RECOMMENDATIONS,\r\n        recommendation\r\n    }\r\n}\r\nexport const setCurrentRecPage = (page) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE_REC,\r\n        page\r\n    }\r\n}\r\n\r\nexport const setRecommendationsTC = (filmId, currnetPage) => async(dispatch) => {\r\n    try {\r\n        dispatch(toggleLoading(true));\r\n        let promise = await MoviesAPI.getRecommendations(filmId, currnetPage)\r\n        dispatch(setRecommendationsAC(promise.data));\r\n        dispatch(toggleLoading(false));\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch(toggleLoading(false));\r\n    }\r\n}\r\n\r\nexport const setCurrnetPageRecTC = (currnetPage) => async(dispatch) => {\r\n    try {\r\n        dispatch(toggleLoading(true));\r\n        dispatch(setCurrentRecPage(currnetPage));\r\n        dispatch(toggleLoading(false));\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch(toggleLoading(false));\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport './Recommendation.css'\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport Recommendation from './Recommendation';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { setRecommendationsTC, setCurrnetPageRecTC } from '../../Redux/recommendationReducer';\r\nimport { setGenresTC } from '../../Redux/genresReducer';\r\nimport Preloader from '../Preloader/Preloader';\r\n\r\nconst RecommendationContainer = (props) => {\r\n    const [loading, toggle] = useState(true);\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            await props.setRecommendationsTC(props.match.params.filmId, props.match.params.page);\r\n            await props.setGenresTC();\r\n            toggle(false);\r\n        }\r\n        fetchData();\r\n    }, [props.match.params.page])\r\n    if (loading) {\r\n        return ''\r\n    }\r\n    return (\r\n        <Recommendation {...props} />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        recommendation: state.rec.recommendation,\r\n        currentPageRec: state.rec.page,\r\n        genreList: state.genres.genreList,\r\n        loading: state.rec.loading\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, {\r\n    setRecommendationsTC,\r\n    setCurrnetPageRecTC,\r\n    setGenresTC\r\n}),\r\n    withRouter\r\n)(RecommendationContainer)","import React from 'react';\nimport Navbar from './Components/Navbar/Navbar';\nimport PopularFilmsContainer from './Components/Movies/PopularFilmsContainer';\nimport DetailMovieContainer from './Components/Movies/DetailMovie/DetailMovieContainer';\nimport { Route, withRouter, Redirect } from 'react-router-dom';\nimport { compose } from 'redux';\nimport RecommendationContainer from './Components/Recommendation/RecommendationContainer';\n\n\n\nfunction App(props) {\n  if(props.location.pathname === \"/\"){\n    return <Redirect to ='/popular/1'/>\n  }\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"container\">\n        <Route exact path='/popular/:page?' render={() => <PopularFilmsContainer />} />\n\n      </div>\n      <Route exact path='/detail/:filmId?/page/:page?' render={() => <DetailMovieContainer />} />\n      <Route exact path='/detail/:filmId?/page/:page?' render={() => <RecommendationContainer />} />\n    </div>\n  );\n}\n\nexport default compose(withRouter)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { movieReducer } from \"./moviesReducer\";\r\nimport { genreReducer } from \"./genresReducer\";\r\nimport { recommendationReducer } from \"./recommendationReducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    movies: movieReducer,\r\n    genres: genreReducer,\r\n    rec: recommendationReducer\r\n})\r\n\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nwindow.store = store;\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport store from './Redux/store';\nimport 'materialize-css';\nimport 'materialize-css/dist/css/materialize.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}